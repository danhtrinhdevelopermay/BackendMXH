require('dotenv').config();
const bcrypt = require('bcrypt');
const pool = require('../config/database');

const VIETNAMESE_FIRST_NAMES = [
  'Minh', 'H∆∞∆°ng', 'Tu·∫•n', 'Linh', 'Ho√†ng', 'Th·∫£o', 'Qu√¢n', 'H√†', 'D≈©ng', 'Ng·ªçc',
  'Kh√°nh', 'Mai', 'Long', 'Trang', 'H√πng', 'Lan', 'Phong', 'Huy·ªÅn', 'Anh', 'Thu',
  'Nam', 'Hoa', 'T√∫', 'Y·∫øn', 'ƒê·ª©c', 'Nhung', 'C∆∞·ªùng', 'V√¢n', 'T√¢m', 'Ph∆∞∆°ng',
  'B·∫£o', 'H·∫±ng', 'S∆°n', 'Di·ªáu', 'Trung', 'My', 'Vi·ªát', 'Ly', 'Khoa', 'Trinh',
  'H·∫£i', 'Loan', 'To√†n', 'Xu√¢n', 'Th·∫Øng', 'Chi', 'B√¨nh', 'Kim', 'ƒê·∫°t', 'Thanh'
];

const VIETNAMESE_LAST_NAMES = [
  'Nguy·ªÖn', 'Tr·∫ßn', 'L√™', 'Ph·∫°m', 'Ho√†ng', 'Hu·ª≥nh', 'Phan', 'V≈©', 'V√µ', 'ƒê·∫∑ng',
  'B√πi', 'ƒê·ªó', 'H·ªì', 'Ng√¥', 'D∆∞∆°ng', 'L√Ω', 'ƒêinh', 'ƒê√†o', 'Cao', 'Mai'
];

const AVATAR_URLS = [
  'https://i.pravatar.cc/150?img=1',
  'https://i.pravatar.cc/150?img=2',
  'https://i.pravatar.cc/150?img=3',
  'https://i.pravatar.cc/150?img=5',
  'https://i.pravatar.cc/150?img=6',
  'https://i.pravatar.cc/150?img=7',
  'https://i.pravatar.cc/150?img=8',
  'https://i.pravatar.cc/150?img=9',
  'https://i.pravatar.cc/150?img=11',
  'https://i.pravatar.cc/150?img=12',
  'https://i.pravatar.cc/150?img=13',
  'https://i.pravatar.cc/150?img=14',
  'https://i.pravatar.cc/150?img=15',
  'https://i.pravatar.cc/150?img=16',
  'https://i.pravatar.cc/150?img=17',
  'https://i.pravatar.cc/150?img=18',
  'https://i.pravatar.cc/150?img=19',
  'https://i.pravatar.cc/150?img=20'
];

const BIOS = [
  'Y√™u th√≠ch du l·ªãch v√† kh√°m ph√° üåè',
  'ƒêam m√™ nhi·∫øp ·∫£nh üì∑',
  'Ng∆∞·ªùi y√™u √¢m nh·∫°c üéµ',
  'Th√≠ch ƒë·ªçc s√°ch v√† cafe ‚òï',
  'Cu·ªôc s·ªëng l√† nh·ªØng chuy·∫øn ƒëi üöó',
  'H·∫°nh ph√∫c l√† nh·ªØng ƒëi·ªÅu gi·∫£n d·ªã ‚ú®',
  'S·ªëng ch·∫≠m, y√™u nhi·ªÅu üíô',
  'M√¨nh l√† ng∆∞·ªùi l·∫°c quan v√† vui v·∫ª üòä',
  'Th√≠ch n·∫•u ƒÉn v√† ƒÉn ngon üçú',
  'Ng∆∞·ªùi m√™ th·ªÉ thao v√† s·ªëng kh·ªèe üí™',
  null, null, null
];

function getRandomElement(array) {
  return array[Math.floor(Math.random() * array.length)];
}

function generateVietnameseName() {
  const lastName = getRandomElement(VIETNAMESE_LAST_NAMES);
  const firstName = getRandomElement(VIETNAMESE_FIRST_NAMES);
  const middleName = Math.random() > 0.5 ? getRandomElement(VIETNAMESE_FIRST_NAMES) : '';
  return middleName ? `${lastName} ${middleName} ${firstName}` : `${lastName} ${firstName}`;
}

function generateUsername(fullName, suffix) {
  const nameParts = fullName.toLowerCase()
    .normalize('NFD')
    .replace(/[\u0300-\u036f]/g, '')
    .replace(/ƒë/g, 'd')
    .split(' ');
  
  const firstName = nameParts[nameParts.length - 1];
  const lastName = nameParts[0];
  
  const patterns = [
    `${firstName}${lastName}${suffix}`,
    `${firstName}.${lastName}${suffix}`,
    `${firstName}_${lastName}${suffix}`,
    `${lastName}${firstName}${suffix}`,
  ];
  
  return getRandomElement(patterns);
}

async function createFakeUsers(count = 100) {
  console.log(`üöÄ B·∫Øt ƒë·∫ßu t·∫°o ${count} t√†i kho·∫£n ·∫£o...`);
  
  const password = 'FakeUser123';
  const password_hash = await bcrypt.hash(password, 10);
  
  let successCount = 0;
  let failCount = 0;
  const createdUsers = [];

  for (let i = 1; i <= count; i++) {
    try {
      const fullName = generateVietnameseName();
      const timestamp = Date.now();
      const randomNum = Math.floor(Math.random() * 9999);
      const suffix = `${randomNum}`;
      const username = generateUsername(fullName, suffix);
      const email = `${username}@fake.com`;
      const avatar_url = getRandomElement(AVATAR_URLS);
      const bio = getRandomElement(BIOS);
      
      const result = await pool.query(
        `INSERT INTO users (username, email, password_hash, full_name, avatar_url, bio, is_verified) 
         VALUES ($1, $2, $3, $4, $5, $6, $7) 
         RETURNING id, username, full_name`,
        [username, email, password_hash, fullName, avatar_url, bio, false]
      );
      
      createdUsers.push(result.rows[0]);
      successCount++;
      
      if (successCount % 10 === 0) {
        console.log(`‚úÖ ƒê√£ t·∫°o ${successCount}/${count} t√†i kho·∫£n...`);
      }
    } catch (error) {
      failCount++;
      console.error(`‚ùå L·ªói t·∫°o t√†i kho·∫£n ${i}:`, error.message);
    }
  }
  
  console.log('\nüìä K·∫øt qu·∫£:');
  console.log(`‚úÖ Th√†nh c√¥ng: ${successCount}`);
  console.log(`‚ùå Th·∫•t b·∫°i: ${failCount}`);
  console.log(`üìù M·∫≠t kh·∫©u m·∫∑c ƒë·ªãnh cho t·∫•t c·∫£ t√†i kho·∫£n ·∫£o: ${password}`);
  
  if (createdUsers.length > 0) {
    console.log('\nüë• M·ªôt s·ªë t√†i kho·∫£n ·∫£o ƒë√£ t·∫°o:');
    createdUsers.slice(0, 5).forEach(user => {
      console.log(`   - ID: ${user.id} | Username: ${user.username} | Name: ${user.full_name}`);
    });
  }
  
  await pool.end();
  return createdUsers;
}

const count = parseInt(process.argv[2]) || 100;
createFakeUsers(count)
  .then(() => {
    console.log('\n‚ú® Ho√†n th√†nh!');
    process.exit(0);
  })
  .catch(error => {
    console.error('üí• L·ªói nghi√™m tr·ªçng:', error);
    process.exit(1);
  });
